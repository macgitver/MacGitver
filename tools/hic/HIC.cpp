/*
 * MacGitver
 * Copyright (C) 2012 Sascha Cunz <sascha@babbelbox.org>
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License (Version 2) as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <QDebug>
#include <QDateTime>
#include <QFileInfo>
#include <QFile>
#include <QUuid>

#include "HIC.h"

#include "HICObject.h"

#include "HIDLexer.h"
#include "HIDParser.h"

static inline QString latin1Encode( const QString& src )
{
	return src;
}

static inline QString utf8Encode( const QString& src )
{
	QByteArray a = src.toUtf8();
	QString result;
	result.reserve( a.count() );

	for( int i = 0; i < a.count(); i++ )
	{
		unsigned char c = a[ i ];
		if( c < 128 )
		{
			result += QLatin1Char( c );
		}
		else
		{
			result += L'\\';
			result += QString::number( c, 8 ).rightJustified( 3, L'0' );
		}
	}

	return result;
}

HeavenInterfaceCompiler::HeavenInterfaceCompiler( int argc , char** argv )
	: QCoreApplication( argc, argv )
{
	QStringList sl = arguments();
}

void HeavenInterfaceCompiler::spitSetProperties( QTextStream& tsOut, HICObject* obj,
												 const char* whitespace,
												 const char* prefix )
{
	foreach( QString pname, obj->propertyNames() )
	{
		if( pname.startsWith( L'_' ) )
		{
			continue;
		}
		HICProperty p = obj->getProperty( pname );

		tsOut << whitespace << prefix << obj->name() << "->set" << pname << "( ";

		switch( p.type() )
		{
		case HICP_String:
			tsOut << "QLatin1String( \"" << latin1Encode( p.value().toString() ) << "\" )";
			break;

		case HICP_TRString:
			tsOut << "trUtf8( \"" << utf8Encode( p.value().toString() ) << "\" )";
			break;

		case HICP_Boolean:
			tsOut << ( p.value().toBool() ? "true" : "false" );
			break;

		default:
			tsOut << "WTF?";
		}

		tsOut << " );\n";
	}

	switch( obj->type() )
	{
	case HACO_Action:
		if( obj->hasProperty( QLatin1String( "_ConnectTo" ), HICP_String ) )
		{
			HICProperty p = obj->getProperty( QLatin1String( "_ConnectTo" ) );

			QString slot = p.value().toString();
			const char* signal = "triggered()";
			if( slot.contains( QLatin1String( "(bool)" ) ) )
			{
				signal = "toggled(bool)";
			}

			QByteArray receiver = "parent";
			if( obj->hasProperty( QLatin1String( "_ConnectContext" ), HICP_String ) )
			{
				HICProperty p2 = obj->getProperty( QLatin1String( "_ConnectContext" ) );
				receiver = p2.value().toString().toLocal8Bit();
			}

			tsOut << whitespace << "QObject::connect( " << prefix << obj->name() << ", SIGNAL(" << signal
				  << "), " << receiver << ", SLOT(" << slot << ") );\n";
		}
		break;

	default:
		break;
	}

}

bool HeavenInterfaceCompiler::spitHeader( const HIDModel& model, QTextStream& tsOut )
{
	QUuid id = QUuid::createUuid();
	QString idstr = id
					.toString()
					.toUpper()
					.replace( L'{', QString() )
					.replace( L'}', QString() )
					.replace( L'-', QLatin1String( "_" ) );

	tsOut << "/**********************************************************************************\n"
			 "*\n"
			 "* This file is generated by HIC, the Heaven Interface Compiler\n"
			 "*\n"
			 "* Any modifications will be lost on the next gererator run. You've been warned.\n"
			 "*\n"
			 "* " << QDateTime::currentDateTime().toString( Qt::ISODate ) << "\n"
			 "*\n"
			 "**********************************************************************************/\n"
			 "\n"
			 "#ifndef HIC_" << idstr << "\n"
			 "#define HIC_" << idstr << "\n\n"
			 "class QObject;\n"
			 "\n"
			 "#include \"Heaven/Actions/Action.h\"\n"
			 "#include \"Heaven/Actions/WidgetAction.h\"\n"
			 "#include \"Heaven/Actions/Menu.h\"\n"
			 "#include \"Heaven/Actions/MenuBar.h\"\n"
			 "#include \"Heaven/Actions/ToolBar.h\"\n"
			 "#include \"Heaven/Actions/MergePlace.h\"\n"
			 "#include \"Heaven/Actions/ActionContainer.h\"\n"
			 "\n";

	foreach( HICObject* uiObject, model.allObjects( HACO_Ui ) )
	{
		tsOut << "#ifndef HIC_" << uiObject->name() << "\n"
				 "#define HIC_" << uiObject->name() << "\n\n"

				 "class " << uiObject->name() << "\n"
				 "{\n"
				 "public:\n"
				 "\tvoid setupActions( QObject* parent );\n"
				 "\n"
				 "private:\n"
				 "\tstatic QString trUtf8( const char* sourceText );\n"
				 "\n"
				 "public:\n";

		foreach( HICObject* object, uiObject->content( HACO_Action ) )
		{
			tsOut << "\tHeaven::Action*          act" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_WidgetAction ) )
		{
			tsOut << "\tHeaven::WidgetAction*    wac" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_MergePlace ) )
		{
			tsOut << "\tHeaven::MergePlace*      mp" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_Menu ) )
		{
			tsOut << "\tHeaven::Menu*            menu" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_MenuBar ) )
		{
			tsOut << "\tHeaven::MenuBar*         mb" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_ToolBar ) )
		{
			tsOut << "\tHeaven::ToolBar*         tb" << object->name() << ";\n";
		}

		foreach( HICObject* object, uiObject->content( HACO_Container ) )
		{
			tsOut << "\tHeaven::ActionContainer* ac" << object->name() << ";\n";
		}

		tsOut << "};\n\n";

		tsOut << "#endif\n\n";
	}

	tsOut << "#endif\n\n";

	return true;
}

bool HeavenInterfaceCompiler::spitSource( const HIDModel& model, QTextStream& tsOut,
										  const QString& baseName )
{
	tsOut << "/**********************************************************************************\n"
			 "*\n"
			 "* This file is generated by HIC, the Heaven Interface Compiler\n"
			 "*\n"
			 "* Any modifications will be lost on the next gererator run. You've been warned.\n"
			 "*\n"
			 "* " << QDateTime::currentDateTime().toString( Qt::ISODate ) << "\n"
			 "*\n"
			 "**********************************************************************************/\n"
			 "\n"
			 "#include <QApplication>\n"
			 "#include <QObject>\n"
			 "\n"
			 "#include \"" << baseName << "\"\n\n";

	foreach( HICObject* uiObject, model.allObjects( HACO_Ui ) )
	{
		QString ctx;

		if( uiObject->hasProperty( QLatin1String( "TrContext" ), HICP_String ) )
		{
			ctx = uiObject->getProperty( QLatin1String( "TrContext" ) ).value().toString();
		}

		if( ctx.isEmpty() )
		{
			ctx = uiObject->name();
		}

		tsOut << "QString "<< uiObject->name() << "::" << "trUtf8( const char* sourceText )\n"
				 "{\n"
				 "\treturn QApplication::translate( \"" << latin1Encode( ctx ) << "\", sourceText, "
					"NULL"
					#if (QT_VERSION < QT_VERSION_CHECK(5, 0, 0))
					", QCoreApplication::UnicodeUTF8"
					#endif
					" );\n"
				 "}\n"
				 "\n";

		tsOut << "void " << uiObject->name() << "::" << "setupActions( QObject* parent )\n"
				 "{\n"
				 "\t//Setup the actions\n\n";

		foreach( HICObject* actionObject, uiObject->content( HACO_Action ) )
		{
			tsOut << "\tact" << actionObject->name() << " = new Heaven::Action( parent );\n";
			spitSetProperties( tsOut, actionObject, "\t", "act" );
			tsOut << "\n";
		}

		foreach( HICObject* actionObject, uiObject->content( HACO_WidgetAction ) )
		{
			tsOut << "\twac" << actionObject->name() << " = new Heaven::WidgetAction( parent );\n";
			spitSetProperties( tsOut, actionObject, "\t", "wac" );
			tsOut << "\n";
		}

		tsOut << "\t//Setup Mergeplaces\n\n";
		foreach( HICObject* mpObject, uiObject->content( HACO_MergePlace ) )
		{
			tsOut << "\tmp" << mpObject->name() << " = new Heaven::MergePlace( parent );\n"
					 "\tmp" << mpObject->name() << "->setName( QByteArray( \"" <<
					 latin1Encode( mpObject->name() ) << "\" ) );\n";
			spitSetProperties( tsOut, mpObject, "\t", "mp" );
			tsOut << "\n";
		}

		tsOut << "\t//Setup containers\n\n";
		foreach( HICObject* menuObject, uiObject->content( HACO_Menu ) )
		{
			tsOut << "\tmenu" << menuObject->name() << " = new Heaven::Menu( parent );\n";
			spitSetProperties( tsOut, menuObject, "\t", "menu" );
			tsOut << "\n";
		}
		foreach( HICObject* menuObject, uiObject->content( HACO_MenuBar ) )
		{
			tsOut << "\tmb" << menuObject->name() << " = new Heaven::MenuBar( parent );\n";
			spitSetProperties( tsOut, menuObject, "\t", "mb" );
			tsOut << "\n";
		}
		foreach( HICObject* menuObject, uiObject->content( HACO_ToolBar ) )
		{
			tsOut << "\ttb" << menuObject->name() << " = new Heaven::ToolBar( parent );\n";
			spitSetProperties( tsOut, menuObject, "\t", "tb" );
			tsOut << "\n";
		}
		foreach( HICObject* menuObject, uiObject->content( HACO_Container ) )
		{
			tsOut << "\tac" << menuObject->name() << " = new Heaven::ActionContainer( parent );\n";
			spitSetProperties( tsOut, menuObject, "\t", "ac" );
			tsOut << "\n";
		}

		tsOut << "\t//Give containers some content\n\n";

		foreach( HICObject* object, uiObject->content() )
		{
			const char* prefix = "";
			switch( object->type() )
			{
			case HACO_Action:
			case HACO_MergePlace:
			case HACO_Ui:
			case HACO_Separator:
			case HACO_WidgetAction:
				continue;

			case HACO_Menu:
				prefix = "\tmenu";
				break;

			case HACO_MenuBar:
				prefix = "\tmb";
				break;

			case HACO_ToolBar:
				prefix = "\ttb";
				break;

			case HACO_Container:
				prefix = "\tac";
				break;
			}

			foreach( HICObject* child, object->content() )
			{
				switch( child->type() )
				{
				case HACO_Separator:
					tsOut << prefix << object->name() << "->addSeparator();\n";
					break;

				case HACO_Action:
					tsOut << prefix << object->name() << "->add( act" << child->name() << " );\n";
					break;

				case HACO_WidgetAction:
					tsOut << prefix << object->name() << "->add( wac" << child->name() << " );\n";
					break;

				case HACO_Container:
					tsOut << prefix << object->name() << "->add( ac" << child->name() << " );\n";
					break;

				case HACO_MergePlace:
					tsOut << prefix << object->name() << "->add( mp" << child->name() << " );\n";
					break;

				case HACO_Menu:
					tsOut << prefix << object->name() << "->add( menu" << child->name() << " );\n";
					break;

				default:
					tsOut << "\t\tWTF?";
				}
			}

			tsOut << "\n";
		}

		tsOut << "}\n\n";
	}

	return true;
}

int HeavenInterfaceCompiler::run()
{
	QStringList sl = arguments();

	if( sl.count() != 4 )
	{
		qDebug() << arguments();

		fprintf( stderr, "Usage: %s <input> <output-header> <output-source>\n",
				 sl.count() ? qPrintable( sl[ 0 ] ) : "" );
		return -1;
	}

	QFile fInput( sl[ 1 ] );
	if( !fInput.open( QFile::ReadOnly ) )
	{
		fprintf( stderr, "Cannot read from %s\n", qPrintable( sl[ 1 ] ) );
		return -1;
	}
HIDTokenStream mTokenStream;
HIDModel model;
	if( !HIDLexer::lex( fInput, mTokenStream ) )
	{
		fprintf( stderr, "Could not tokenize input from %s\n", qPrintable( sl[ 1 ] ) );
		return -1;
	}

	if( !HIDParser::parse( mTokenStream, model ) )
	{
		fprintf( stderr, "Could not parse input from %s\n", qPrintable( sl[ 1 ] ) );
		return -1;
	}

	QFile fOutput1( sl[ 2 ] );
	if( !fOutput1.open( QFile::WriteOnly ) )
	{
		fprintf( stderr, "Could not open %s for output\n", qPrintable( sl[ 2 ] ) );
		return -1;
	}

	QTextStream tsOutput1( &fOutput1 );
	spitHeader( model, tsOutput1 );

	QFile fOutput2( sl[ 3 ] );
	if( !fOutput2.open( QFile::WriteOnly ) )
	{
		fprintf( stderr, "Could not open %s for output\n", qPrintable( sl[ 3 ] ) );
		return -1;
	}

	QTextStream tsOutput2( &fOutput2 );
	spitSource( model, tsOutput2, QFileInfo( fOutput1 ).fileName() );

	return 0;
}
